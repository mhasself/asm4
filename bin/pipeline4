#!/usr/bin/env python
from __future__ import print_function
from __future__ import absolute_import
from past.builtins import basestring

import asm4
import moby2
import os
import fnmatch

import optparse
o = optparse.OptionParser()
o.add_option('--retry', action='append', default=[],
             help="Remove failed product so it will not say 'failed'.")
o.add_option('--reset', action='append', default=[],
             help="Remove product to force a rebuild.")
o.add_option('--check', action='store_true',
             help="Perform no actions except to check the product status.")
o.add_option('--test-item', action='append',
             help="Select one or more items for a test run.")
o.add_option('--fork', type=int, default=1)
o.add_option('--group', type=int, nargs=2, default=None,
             help="(this_group, n_groups)")
o.add_option('-p', '--product', action='append',
             help="Select product to produce.")
o.add_option('--set', nargs=2, action='append', default=[])
o.add_option('--exclusive', action='store_true',
             help="Use a lockfile to prevent other pipeline runs on same config file.")
o.add_option('-c', '--config-file', default='pipeline.in')
opts, args = o.parse_args()

cfg = moby2.util.MobyDict.from_file(opts.config_file)

product_dict = {}
for p in cfg['products']:
    if p['name'] in product_dict:
        raise ValueError("Duplicate 'name'='%s' in products spec." % p['name'])
    product_dict[p['name']] = p

mode = 'normal'
if (opts.check or
    (len(opts.reset) > 0) or
    (len(opts.retry) > 0)):
    mode = 'special'

obs_db = (None, None)
def get_tod_info(params, tod_id):
    global obs_db
    ar = tod_id[22:25]
    year = moby2.util.ctime.to_string(int(tod_id[:10])-60*86400, '%Y')
    info = {
        'tod_id': tod_id,
        'first_five': tod_id[:5],
        'array': 'pa'+ar[-1],
        'season': 's'+year[-2:],
        'old_array': ar,
        'old_season': year,
        }
    # Override/add from obs_db?
    if 'obs_db_load' in params:
        fn = params['obs_db']
        if obs_db[0] == fn:
            db = obs_db[1]
        else:
            db = moby2.util.StructDB.from_fits_table(fn)
            obs_db = (fn, db)
        tod_key = 'tod_id'
        if not tod_key in db.dtype.names:
            tod_key = 'tod_name'
        i = db.select_inner({tod_key: [tod_id]})
        for k in params['obs_db_load']:
            info[k] = db[k][i[0]]
    return info

this_fork = 0
while this_fork < opts.fork-1:
    id_ = os.fork()
    if id_ == 0:
        break
    this_fork += 1

if opts.fork > 1:
    print('This is thread %i' % this_fork)
else:
    # Note this doesn't work with forking yet...
    if opts.exclusive:
        import filelock
        lock = filelock.FileLock(opts.config_file + '.lock')
        try:
            lock.acquire(timeout=1)
        except Timeout:
            o.error('Could not acquire lock.')

mpi = moby2.scripting.MobyMPI()
if mpi.size > 1:
    print('This is thread %i/%i' % (mpi.rank, mpi.size))
    this_fork = mpi.rank
    opts.fork = mpi.size

if opts.group is not None:
    print('I will do jobs %i/%i' % tuple(opts.group))
    this_fork, opts.fork = opts.group

for pipeline_op in cfg['pipeline']:
    op_params = cfg['global_params'].copy()

    if pipeline_op['type'] == 'tod_loop':
        if pipeline_op['source'] == 'column_file':
            db = moby2.util.StructDB.from_column_file(
                pipeline_op['filename'], pipeline_op['columns'])
        else:
            blech
            
        counter = 0
        for tod_id in db['tod_id']:
            counter += 1
            if not counter % opts.fork == this_fork:
                continue
            if opts.test_item is not None:
                for pattern in opts.test_item:
                    if fnmatch.fnmatchcase(tod_id, pattern):
                        break
                else:
                    continue
            print(tod_id)
            loop_info = get_tod_info(op_params, tod_id)
            loop_info['group_count'] = opts.fork
            loop_info['group_idx'] = this_fork
            # Jam in additional variables?
            for k,v in opts.set:
                loop_info[k] = v

            product_status = {}
            rolling = True
            if opts.product is None:
                to_do = [op for op in pipeline_op['products']]
            else:
                to_do = [op for op in opts.product]
            while len(to_do) > 0:
                product_name = to_do[0]
                product_cfg = product_dict.get(product_name, None)
                if product_cfg is None:
                    raise ValueError("product_name='%s' DNE" % product_name)
                # Check that dependencies are met.
                params = op_params.copy()
                params.update(product_cfg.get('params', {}))
                deps = product_cfg.get('depends', [])

                action = 'go'
                for d in deps:
                    if not d in product_status:
                        if d in to_do:
                            to_do.remove(d)
                            to_do.insert(d, 0)
                            action = 'postpone'
                    elif product_status[d] != 'ok':
                        deps_ok = False
                        action = 'abort'
                        break
                if action == 'abort':
                    break
                elif action == 'postpone':
                    continue

                to_do.remove(product_name)
                if product_cfg is None:
                    raise ValueError("product_name='%s' DNE" % product_name)
                params.update(loop_info)
                obj = asm4.obj_map[product_cfg['type']](params)
                stat = obj.status()
                product_status[product_name] = stat
                if mode == 'normal':
                    print(' ', tod_id, product_name, stat)
                    if stat == 'new':
                        print('Running %s for %s' % (product_name, tod_id))
                        obj.run()
                        stat = obj.status()
                        product_status[product_name] = stat
                    if stat == 'ok':
                        continue
                    if stat == 'fail':
                        break
                elif opts.check:
                    print(' ', tod_id, product_name, stat)
                    if stat != 'ok':
                        break
                elif product_name in opts.retry:
                    if stat == 'fail':
                        print('Retrying %s for %s' % (product_name, tod_id))
                        obj.reset_failed()
                elif product_name in opts.reset:
                    print('Resetting %s for %s' % (product_name, tod_id))
                    obj.reset_ok()
